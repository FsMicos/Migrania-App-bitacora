name: CI - Tests with Behave

on:
  push:
    branches: [ "main", "develop", "feature" ]
  pull_request:
    branches: [ "main", "develop" ]
  # Opcional: ejecutar manualmente
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_migraine_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libpq-dev
    
    - name: Install Python dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install behave
        pip install behave-django
    
    - name: Set environment variables
      run: |
        echo "DJANGO_SETTINGS_MODULE=migraine_app.settings" >> $GITHUB_ENV
        echo "DATABASE_URL=postgres://postgres:postgres@localhost:5432/test_migraine_db" >> $GITHUB_ENV
    
    - name: Run Django migrations
      working-directory: ./backend
      run: |
        python manage.py migrate
    
    - name: Run Behave tests - Agendamiento Citas
      working-directory: ./backend
      run: |
        behave agendamiento_citas/features/ --format=progress --no-capture
      continue-on-error: true
    
    - name: Run Behave tests - Evaluación Diagnóstico
      working-directory: ./backend
      run: |
        behave evaluacion_diagnostico/features/ --format=progress --no-capture
      continue-on-error: true
    
    - name: Run Behave tests - Tratamiento
      working-directory: ./backend
      run: |
        behave tratamiento/features/ --format=progress --no-capture
      continue-on-error: true
    
    - name: Run Behave tests - Analíticas
      working-directory: ./backend
      run: |
        behave analiticas/features/ --format=progress --no-capture
      continue-on-error: true
    
    - name: Run All Behave tests (consolidated report)
      working-directory: ./backend
      run: |
        behave --format=json --outfile=behave_results.json
        behave --format=pretty
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: behave-test-results
        path: backend/behave_results.json

  lint-and-format:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install linting dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort
    
    - name: Run Black formatter check
      working-directory: ./backend
      run: |
        black --check .
      continue-on-error: true
    
    - name: Run isort import sorting check
      working-directory: ./backend
      run: |
        isort --check-only .
      continue-on-error: true
    
    - name: Run flake8 linting
      working-directory: ./backend
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      continue-on-error: true

  frontend-test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci
    
    - name: Run frontend linting
      working-directory: ./frontend
      run: npm run lint
      continue-on-error: true
    
    - name: Build frontend
      working-directory: ./frontend
      run: npm run build
    
    - name: Run frontend tests (if available)
      working-directory: ./frontend
      run: |
        if [ -f "package.json" ] && grep -q '"test"' package.json; then
          npm test
        else
          echo "No frontend tests configured"
        fi
      continue-on-error: true
