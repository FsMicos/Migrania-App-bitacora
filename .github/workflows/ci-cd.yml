name: CI/CD Pipeline - Migraine App

on:
  push:
    branches:
      - main
      - dev
      - 'feature/*'
  pull_request:
    branches:
      - main
      - dev
      - 'feature/*'
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Job 1: Code Quality and Linting
  lint-and-format:
    name: Code Quality Check
    runs-on: ubuntu-latest
    strategy:
      matrix:
        component: [backend, frontend]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python (Backend)
        if: matrix.component == 'backend'
        uses: actions/setup-python@v4
        with:
          python-version: '3.13'

      - name: Set up Node.js (Frontend)
        if: matrix.component == 'frontend'
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install UV (Backend)
        if: matrix.component == 'backend'
        run: curl -LsSf https://astral.sh/uv/install.sh | sh

      - name: Install Backend Dependencies
        if: matrix.component == 'backend'
        run: |
          cd backend
          uv pip install --system -r requirements.txt
          uv pip install --system flake8 black isort

      - name: Install Frontend Dependencies
        if: matrix.component == 'frontend'
        run: |
          cd frontend
          npm ci

      - name: Lint Backend Code
        if: matrix.component == 'backend'
        run: |
          cd backend
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Check Backend Code Formatting
        if: matrix.component == 'backend'
        run: |
          cd backend
          black --check .
          isort --check-only .

      - name: Lint Frontend Code
        if: matrix.component == 'frontend'
        run: |
          cd frontend
          npm run lint

  # Job 2: Backend Tests
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    needs: lint-and-format
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_migraine_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.13'

      - name: Install UV
        run: curl -LsSf https://astral.sh/uv/install.sh | sh

      - name: Install Dependencies
        run: |
          cd backend
          uv pip install --system -r requirements.txt
          uv pip install --system coverage pytest-django

      - name: Set up Environment Variables
        run: |
          cd backend
          echo "DEBUG=True" > .env
          echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/test_migraine_db" >> .env
          echo "SECRET_KEY=test-secret-key-for-ci" >> .env

      - name: Run Django Tests
        run: |
          cd backend
          python manage.py collectstatic --noinput
          python manage.py migrate
          coverage run --source='.' manage.py test
          coverage xml

      - name: Run BDD Tests (Behave)
        run: |
          cd backend
          behave --junit --junit-directory=test-reports

      - name: Upload Coverage Reports
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage.xml
          flags: backend
          name: backend-coverage

      - name: Upload Test Results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: backend-test-results
          path: backend/test-reports/

  # Job 3: Frontend Tests
  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    needs: lint-and-format

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install Dependencies
        run: |
          cd frontend
          npm ci

      - name: Build Frontend
        run: |
          cd frontend
          npm run build

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: frontend-build
          path: frontend/dist/

  # Job 4: Security Scanning
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Job 5: Build and Push Docker Images
  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev'
    
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Job 6: Deploy to Development Environment
  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/dev' && github.event_name == 'push'
    environment: development

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Development Environment
        run: |
          echo "Deploying to development environment..."
          echo "Image: ${{ needs.build-and-push.outputs.image-tag }}"
          # Add your deployment script here
          # Example: kubectl set image deployment/migraine-app migraine-app=${{ needs.build-and-push.outputs.image-tag }}

  # Job 7: Deploy to Staging Environment
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-and-push, deploy-dev]
    if: github.ref == 'refs/heads/dev' && github.event_name == 'push'
    environment: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Staging Environment
        run: |
          echo "Deploying to staging environment..."
          echo "Image: ${{ needs.build-and-push.outputs.image-tag }}"
          # Add your staging deployment script here

  # Job 8: Deploy to Production Environment
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Production Environment
        run: |
          echo "Deploying to production environment..."
          echo "Image: ${{ needs.build-and-push.outputs.image-tag }}"
          # Add your production deployment script here

  # Job 9: Integration Tests (E2E)
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Integration Tests
        run: |
          echo "Running integration tests against staging environment..."
          # Add your E2E test scripts here
          # Example: npm run test:e2e or pytest integration_tests/

  # Job 10: Notification
  notify:
    name: Notify Teams
    runs-on: ubuntu-latest
    needs: [deploy-production, deploy-staging, integration-tests]
    if: always()

    steps:
      - name: Notify Slack/Teams
        run: |
          echo "Sending notifications to development teams..."
          # Add your notification logic here
          # You can use Slack webhooks, Teams notifications, etc.
