name: Feature Branch Validation

on:
  pull_request:
    branches:
      - dev
      - main
      - 'feature/*'
    types: [opened, synchronize, reopened]

jobs:
  # Job 1: Validate PR Structure
  pr-validation:
    name: Validate Pull Request
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Validate Branch Naming
        run: |
          BRANCH_NAME="${{ github.head_ref }}"
          echo "Validating branch name: $BRANCH_NAME"
          
          # Check if it's a valid feature branch
          if [[ "$BRANCH_NAME" =~ ^feature_grupo[1-7]_.+ ]]; then
            echo "✅ Valid feature branch naming convention"
          elif [[ "$BRANCH_NAME" == "dev" ]] || [[ "$BRANCH_NAME" == "main" ]]; then
            echo "✅ Valid main/dev branch"
          else
            echo "❌ Invalid branch naming. Use format: feature_grupo[1-7]_description"
            exit 1
          fi

      - name: Check PR Title Format
        run: |
          PR_TITLE="${{ github.event.pull_request.title }}"
          echo "Validating PR title: $PR_TITLE"
          
          # Check if PR title follows conventional commits or has a squad prefix
          if [[ "$PR_TITLE" =~ ^(feat|fix|docs|style|refactor|test|chore)(\(.+\))?: ]]; then
            echo "✅ Valid conventional commit format"
          elif [[ "$PR_TITLE" =~ ^(Grupo|Squad)[1-7]: ]]; then
            echo "✅ Valid squad format"
          else
            echo "⚠️ Consider using conventional commit format or squad prefix"
          fi

      - name: Check for Squad Label
        run: |
          # Extract squad number from branch name
          BRANCH_NAME="${{ github.head_ref }}"
          if [[ "$BRANCH_NAME" =~ feature_grupo([1-7])_ ]]; then
            SQUAD_NUMBER="${BASH_REMATCH[1]}"
            echo "This PR belongs to Squad $SQUAD_NUMBER"
            echo "Make sure to add the 'squad-$SQUAD_NUMBER' label to this PR"
          fi

  # Job 2: Code Quality for Feature Branches
  feature-quality-check:
    name: Feature Code Quality
    runs-on: ubuntu-latest
    strategy:
      matrix:
        component: [backend, frontend]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python (Backend)
        if: matrix.component == 'backend'
        uses: actions/setup-python@v4
        with:
          python-version: '3.13'

      - name: Set up Node.js (Frontend)
        if: matrix.component == 'frontend'
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install UV (Backend)
        if: matrix.component == 'backend'
        run: curl -LsSf https://astral.sh/uv/install.sh | sh

      - name: Install Backend Dependencies
        if: matrix.component == 'backend'
        run: |
          cd backend
          uv pip install --system -r requirements.txt
          uv pip install --system flake8 black isort

      - name: Install Frontend Dependencies
        if: matrix.component == 'frontend'
        run: |
          cd frontend
          npm ci

      - name: Run Backend Quality Checks
        if: matrix.component == 'backend'
        run: |
          cd backend
          echo "🔍 Running flake8..."
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          
          echo "🔍 Checking code formatting..."
          black --check . || (echo "❌ Code formatting issues found. Run 'black .' to fix." && exit 1)
          
          echo "🔍 Checking import order..."
          isort --check-only . || (echo "❌ Import order issues found. Run 'isort .' to fix." && exit 1)

      - name: Run Frontend Quality Checks
        if: matrix.component == 'frontend'
        run: |
          cd frontend
          echo "🔍 Running ESLint..."
          npm run lint

  # Job 3: Feature-specific Tests
  feature-tests:
    name: Feature Tests
    runs-on: ubuntu-latest
    needs: [pr-validation, feature-quality-check]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_migraine_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.13'

      - name: Install UV
        run: curl -LsSf https://astral.sh/uv/install.sh | sh

      - name: Install Dependencies
        run: |
          cd backend
          uv pip install --system -r requirements.txt

      - name: Set up Test Environment
        run: |
          cd backend
          echo "DEBUG=True" > .env
          echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/test_migraine_db" >> .env
          echo "SECRET_KEY=test-secret-key-for-feature-testing" >> .env

      - name: Run Django Migrations
        run: |
          cd backend
          python manage.py migrate

      - name: Identify Feature Tests
        run: |
          BRANCH_NAME="${{ github.head_ref }}"
          echo "Current branch: $BRANCH_NAME"
          
          # Extract feature info from branch name
          if [[ "$BRANCH_NAME" =~ feature_grupo([1-7])_(.+) ]]; then
            SQUAD_NUMBER="${BASH_REMATCH[1]}"
            FEATURE_NAME="${BASH_REMATCH[2]}"
            echo "Squad: $SQUAD_NUMBER"
            echo "Feature: $FEATURE_NAME"
            
            # Map squad numbers to app names
            case $SQUAD_NUMBER in
              1) APP_NAME="evaluacion_diagnostico" ;;
              2) APP_NAME="evaluacion_diagnostico" ;;
              3) APP_NAME="tratamiento" ;;
              4) APP_NAME="analiticas" ;;
              5) APP_NAME="agendamiento_citas" ;;
              6) APP_NAME="analiticas" ;;
              7) APP_NAME="tratamiento" ;;
              *) APP_NAME="" ;;
            esac
            
            echo "APP_NAME=$APP_NAME" >> $GITHUB_ENV
            echo "SQUAD_NUMBER=$SQUAD_NUMBER" >> $GITHUB_ENV
          fi

      - name: Run Feature-specific Tests
        run: |
          cd backend
          if [ -n "$APP_NAME" ]; then
            echo "🧪 Running tests for app: $APP_NAME"
            python manage.py test $APP_NAME --verbosity=2
            
            # Run BDD tests for the specific feature if they exist
            if [ -d "$APP_NAME/features" ]; then
              echo "🥒 Running BDD tests for $APP_NAME"
              behave $APP_NAME/features/ --junit --junit-directory=test-reports-feature
            fi
          else
            echo "🧪 Running all tests as fallback"
            python manage.py test --verbosity=2
          fi

      - name: Upload Feature Test Results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: feature-test-results-squad-${{ env.SQUAD_NUMBER }}
          path: backend/test-reports-feature/

  # Job 4: Comment on PR with Test Results
  pr-comment:
    name: PR Comment with Results
    runs-on: ubuntu-latest
    needs: [feature-tests]
    if: always()
    
    steps:
      - name: Comment PR
        uses: actions/github-script@v6
        with:
          script: |
            const { data: pullRequest } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
            });

            const branchName = pullRequest.head.ref;
            const squadMatch = branchName.match(/feature_grupo([1-7])_(.+)/);
            
            let comment = `## 🤖 Automated PR Review\n\n`;
            comment += `**Branch:** \`${branchName}\`\n`;
            
            if (squadMatch) {
              const squad = squadMatch[1];
              const feature = squadMatch[2];
              comment += `**Squad:** ${squad}\n`;
              comment += `**Feature:** ${feature.replace(/_/g, ' ')}\n\n`;
            }
            
            comment += `### ✅ Validation Results\n`;
            comment += `- Branch naming: ${{ needs.pr-validation.result == 'success' && '✅' || '❌' }}\n`;
            comment += `- Code quality: ${{ needs.feature-quality-check.result == 'success' && '✅' || '❌' }}\n`;
            comment += `- Feature tests: ${{ needs.feature-tests.result == 'success' && '✅' || '❌' }}\n\n`;
            
            if ('${{ needs.feature-tests.result }}' === 'success') {
              comment += `🎉 All checks passed! This PR is ready for review.\n\n`;
            } else {
              comment += `⚠️ Some checks failed. Please review the results above.\n\n`;
            }
            
            comment += `---\n*This comment was automatically generated by GitHub Actions*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
