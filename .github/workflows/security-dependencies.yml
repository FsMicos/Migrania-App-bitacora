name: Security and Dependency Management

on:
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - 'backend/requirements.txt'
      - 'backend/pyproject.toml'
      - 'frontend/package.json'
      - 'frontend/package-lock.json'

jobs:
  # Job 1: Dependency Vulnerability Scan
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        component: [backend, frontend]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python (Backend)
        if: matrix.component == 'backend'
        uses: actions/setup-python@v4
        with:
          python-version: '3.13'

      - name: Set up Node.js (Frontend)
        if: matrix.component == 'frontend'
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Dependencies (Backend)
        if: matrix.component == 'backend'
        run: |
          cd backend
          curl -LsSf https://astral.sh/uv/install.sh | sh
          uv pip install --system -r requirements.txt
          uv pip install --system safety

      - name: Install Dependencies (Frontend)
        if: matrix.component == 'frontend'
        run: |
          cd frontend
          npm ci

      - name: Run Safety Check (Backend)
        if: matrix.component == 'backend'
        run: |
          cd backend
          safety check --json --output safety-report.json || true
          safety check || echo "Security vulnerabilities found in backend dependencies"

      - name: Run NPM Audit (Frontend)
        if: matrix.component == 'frontend'
        run: |
          cd frontend
          npm audit --audit-level=moderate --json > npm-audit-report.json || true
          npm audit --audit-level=moderate || echo "Security vulnerabilities found in frontend dependencies"

      - name: Upload Security Reports
        uses: actions/upload-artifact@v3
        with:
          name: security-reports-${{ matrix.component }}
          path: |
            backend/safety-report.json
            frontend/npm-audit-report.json

  # Job 2: License Compliance Check
  license-check:
    name: License Compliance
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.13'

      - name: Install License Checker
        run: |
          pip install pip-licenses

      - name: Check Python Licenses
        run: |
          cd backend
          pip install -r requirements.txt
          pip-licenses --format=json --output-file=python-licenses.json
          pip-licenses --fail-on="GPL"

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Check JavaScript Licenses
        run: |
          cd frontend
          npm ci
          npx license-checker --json --out js-licenses.json
          npx license-checker --excludePackages "$(cat package.json | jq -r '.name')" --onlyAllow "MIT;Apache-2.0;BSD-2-Clause;BSD-3-Clause;ISC;0BSD"

      - name: Upload License Reports
        uses: actions/upload-artifact@v3
        with:
          name: license-reports
          path: |
            backend/python-licenses.json
            frontend/js-licenses.json

  # Job 3: Automated Dependency Updates
  dependency-update:
    name: Automated Dependency Updates
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.13'

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install UV
        run: curl -LsSf https://astral.sh/uv/install.sh | sh

      - name: Update Python Dependencies
        run: |
          cd backend
          # Create a backup of current requirements
          cp requirements.txt requirements.txt.backup
          
          # Update dependencies
          uv pip compile pyproject.toml --upgrade --output-file requirements.txt
          
          # Check if there are changes
          if ! diff -q requirements.txt requirements.txt.backup > /dev/null; then
            echo "PYTHON_DEPS_UPDATED=true" >> $GITHUB_ENV
            echo "Python dependencies updated"
          else
            echo "PYTHON_DEPS_UPDATED=false" >> $GITHUB_ENV
            echo "No Python dependency updates"
          fi

      - name: Update Frontend Dependencies
        run: |
          cd frontend
          # Update package.json dependencies
          npx npm-check-updates -u
          npm install
          
          # Check if package.json was updated
          if git diff --quiet package.json; then
            echo "JS_DEPS_UPDATED=false" >> $GITHUB_ENV
            echo "No JavaScript dependency updates"
          else
            echo "JS_DEPS_UPDATED=true" >> $GITHUB_ENV
            echo "JavaScript dependencies updated"
          fi

      - name: Run Tests After Updates
        if: env.PYTHON_DEPS_UPDATED == 'true' || env.JS_DEPS_UPDATED == 'true'
        run: |
          # Run basic tests to ensure updates don't break anything
          echo "Running tests after dependency updates..."
          
          # Backend tests
          if [ "$PYTHON_DEPS_UPDATED" = "true" ]; then
            cd backend
            uv pip install --system -r requirements.txt
            python manage.py check
            cd ..
          fi
          
          # Frontend tests
          if [ "$JS_DEPS_UPDATED" = "true" ]; then
            cd frontend
            npm run build
            cd ..
          fi

      - name: Create Pull Request
        if: env.PYTHON_DEPS_UPDATED == 'true' || env.JS_DEPS_UPDATED == 'true'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "chore: automated dependency updates"
          title: "ðŸ¤– Automated Dependency Updates"
          body: |
            ## Automated Dependency Updates
            
            This PR contains automated dependency updates:
            
            - Python dependencies updated: ${{ env.PYTHON_DEPS_UPDATED }}
            - JavaScript dependencies updated: ${{ env.JS_DEPS_UPDATED }}
            
            ### Changes Made:
            - Updated Python dependencies in `backend/requirements.txt`
            - Updated JavaScript dependencies in `frontend/package.json`
            
            ### Testing:
            - âœ… Basic checks passed
            - âœ… Build processes validated
            
            **Please review the changes and run the full test suite before merging.**
            
            ---
            *This PR was automatically created by GitHub Actions*
          branch: chore/automated-dependency-updates
          base: dev
          labels: |
            dependencies
            automated
            chore

  # Job 4: Security Advisory Monitoring
  security-advisory:
    name: Security Advisory Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for Security Advisories
        run: |
          echo "Checking for security advisories..."
          
          # Check GitHub Security Advisories for Python packages
          curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
               -H "Accept: application/vnd.github.v3+json" \
               "https://api.github.com/advisories?ecosystem=pip" > python-advisories.json
          
          # Check GitHub Security Advisories for npm packages
          curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
               -H "Accept: application/vnd.github.v3+json" \
               "https://api.github.com/advisories?ecosystem=npm" > npm-advisories.json

      - name: Process Security Advisories
        run: |
          echo "Processing security advisories..."
          
          # You can add custom logic here to:
          # 1. Parse the advisories
          # 2. Check if any affect your dependencies
          # 3. Create issues for critical vulnerabilities
          # 4. Send notifications to security team
          
          echo "Security advisory check completed"

  # Job 5: Compliance Reporting
  compliance-report:
    name: Generate Compliance Report
    runs-on: ubuntu-latest
    needs: [dependency-scan, license-check]
    if: always()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Artifacts
        uses: actions/download-artifact@v3

      - name: Generate Compliance Report
        run: |
          echo "# Security and Compliance Report" > compliance-report.md
          echo "Generated on: $(date)" >> compliance-report.md
          echo "" >> compliance-report.md
          
          echo "## Dependency Scan Results" >> compliance-report.md
          echo "- Backend security scan: ${{ needs.dependency-scan.result }}" >> compliance-report.md
          echo "- Frontend security scan: ${{ needs.dependency-scan.result }}" >> compliance-report.md
          echo "" >> compliance-report.md
          
          echo "## License Compliance" >> compliance-report.md
          echo "- License check: ${{ needs.license-check.result }}" >> compliance-report.md
          echo "" >> compliance-report.md
          
          echo "## Recommendations" >> compliance-report.md
          echo "- Review any failed security scans" >> compliance-report.md
          echo "- Update dependencies with known vulnerabilities" >> compliance-report.md
          echo "- Ensure all licenses comply with company policy" >> compliance-report.md

      - name: Upload Compliance Report
        uses: actions/upload-artifact@v3
        with:
          name: compliance-report
          path: compliance-report.md

      - name: Notify Security Team
        if: needs.dependency-scan.result == 'failure' || needs.license-check.result == 'failure'
        run: |
          echo "ðŸš¨ Security issues detected. Notifying security team..."
          # Add notification logic here (Slack, email, etc.)
